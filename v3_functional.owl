Prefix(:=<http://www.example.org/crm_detailed_ontology#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.example.org/crm_detailed_ontology>
Annotation(rdfs:comment "Ontology for CRM system reflecting Accounts, Pipelines, Leads, Statuses, Timelines, and Changes")
Annotation(owl:versionInfo "3.3")

Declaration(Class(:Account))
AnnotationAssertion(rdfs:comment :Account "Аккаунт, центральный узел, связывающий различные сущности в системе CRM.")
Declaration(Class(:Contact))
AnnotationAssertion(rdfs:comment :Contact "Представляет контактное лицо, связанное с лидами.")
Declaration(Class(:CustomField))
AnnotationAssertion(rdfs:comment :CustomField "Пользовательские поля, связанные с лидами и другими сущностями.")
Declaration(Class(:ElementsTimeline))
AnnotationAssertion(rdfs:comment :ElementsTimeline "Представляет временную шкалу событий и изменений в сущностях CRM.")
Declaration(Class(:ElementsTimelineEmbedded))
AnnotationAssertion(rdfs:comment :ElementsTimelineEmbedded "Представляет вложенные события внутри временной шкалы.")
Declaration(Class(:ElementsTimelineLinks))
AnnotationAssertion(rdfs:comment :ElementsTimelineLinks "Представляет ссылки пагинации (prev, next) во временной шкале.")
Declaration(Class(:FilterPreset))
AnnotationAssertion(rdfs:comment :FilterPreset "Представляет предустановленные фильтры, используемые для лидов.")
Declaration(Class(:Item))
AnnotationAssertion(rdfs:comment :Item "Представляет элементы (задачи, заметки, события), связанные с лидами и другими сущностями.")
Declaration(Class(:Lead))
AnnotationAssertion(rdfs:comment :Lead "Представляет потенциальную сделку или возможность в CRM.")
Declaration(Class(:LossReason))
AnnotationAssertion(rdfs:comment :LossReason "Представляет причины, по которым лид был потерян.")
Declaration(Class(:ObjectType))
AnnotationAssertion(rdfs:comment :ObjectType "Представляет тип объекта (Лид, Контакт, Элемент и т.д.) в CRM.")
Declaration(Class(:ParamsClass))
AnnotationAssertion(rdfs:comment :ParamsClass "Представляет параметры событий, связанных с изменениями статусов, пайплайнов и других сущностей.")
Declaration(Class(:Pipeline))
AnnotationAssertion(rdfs:comment :Pipeline "Представляет категорию воронки продаж в CRM.")
Declaration(Class(:Status))
AnnotationAssertion(rdfs:comment :Status "Представляет этапы воронки продаж.")
Declaration(Class(:TaskResult))
AnnotationAssertion(rdfs:comment :TaskResult "Представляет результат задачи, связанный с лидом.")
Declaration(Class(:TypeElement))
AnnotationAssertion(rdfs:comment :TypeElement "Представляет типы элементов, связанные с лидами.")
Declaration(ObjectProperty(:belongFromContactToObjectType))
AnnotationAssertion(rdfs:comment :belongFromContactToObjectType "Contact имеет только один ObjectType.")
SubObjectPropertyOf(:belongFromContactToObjectType :belongToClass)
FunctionalObjectProperty(:belongFromContactToObjectType)
ObjectPropertyDomain(:belongFromContactToObjectType :Contact)
ObjectPropertyRange(:belongFromContactToObjectType :ObjectType)
Declaration(ObjectProperty(:belongFromElementsTimelineEmbeddedToAccount))
AnnotationAssertion(rdfs:comment :belongFromElementsTimelineEmbeddedToAccount "Вложенный элемент принадлежит одному аккаунту (функциональное свойство).")
SubObjectPropertyOf(:belongFromElementsTimelineEmbeddedToAccount :belongToClass)
FunctionalObjectProperty(:belongFromElementsTimelineEmbeddedToAccount)
ObjectPropertyDomain(:belongFromElementsTimelineEmbeddedToAccount :ElementsTimelineEmbedded)
ObjectPropertyRange(:belongFromElementsTimelineEmbeddedToAccount :Account)
Declaration(ObjectProperty(:belongFromElementsTimelineEmbeddedToElementsTimeline))
AnnotationAssertion(rdfs:comment :belongFromElementsTimelineEmbeddedToElementsTimeline "Объект со вложенными элемнтами имеет одну временную шкалу.")
SubObjectPropertyOf(:belongFromElementsTimelineEmbeddedToElementsTimeline :belongToClass)
FunctionalObjectProperty(:belongFromElementsTimelineEmbeddedToElementsTimeline)
ObjectPropertyDomain(:belongFromElementsTimelineEmbeddedToElementsTimeline :ElementsTimelineEmbedded)
ObjectPropertyRange(:belongFromElementsTimelineEmbeddedToElementsTimeline :ElementsTimeline)
Declaration(ObjectProperty(:belongFromElementsTimelineLinksToElementsTimeline))
AnnotationAssertion(rdfs:comment :belongFromElementsTimelineLinksToElementsTimeline "Временная шкала имеет один объект ссылок (функциональное свойство).")
SubObjectPropertyOf(:belongFromElementsTimelineLinksToElementsTimeline :belongToClass)
FunctionalObjectProperty(:belongFromElementsTimelineLinksToElementsTimeline)
ObjectPropertyDomain(:belongFromElementsTimelineLinksToElementsTimeline :ElementsTimelineLinks)
ObjectPropertyRange(:belongFromElementsTimelineLinksToElementsTimeline :ElementsTimeline)
Declaration(ObjectProperty(:belongFromElementsTimelineToElementsTimelineEmbedded))
AnnotationAssertion(rdfs:comment :belongFromElementsTimelineToElementsTimelineEmbedded "Временная шкала имеет один объект со вложенными элементами (функциональное свойство).")
SubObjectPropertyOf(:belongFromElementsTimelineToElementsTimelineEmbedded :belongToClass)
FunctionalObjectProperty(:belongFromElementsTimelineToElementsTimelineEmbedded)
ObjectPropertyDomain(:belongFromElementsTimelineToElementsTimelineEmbedded :ElementsTimeline)
ObjectPropertyRange(:belongFromElementsTimelineToElementsTimelineEmbedded :ElementsTimelineEmbedded)
Declaration(ObjectProperty(:belongFromItemToLead))
AnnotationAssertion(rdfs:comment :belongFromItemToLead "Item имеет только один Lead.")
SubObjectPropertyOf(:belongFromItemToLead :belongToClass)
FunctionalObjectProperty(:belongFromItemToLead)
ObjectPropertyDomain(:belongFromItemToLead :Item)
ObjectPropertyRange(:belongFromItemToLead :Lead)
Declaration(ObjectProperty(:belongFromItemToObjectType))
AnnotationAssertion(rdfs:comment :belongFromItemToObjectType "Item имеет только один ObjectType.")
SubObjectPropertyOf(:belongFromItemToObjectType :belongToClass)
FunctionalObjectProperty(:belongFromItemToObjectType)
ObjectPropertyDomain(:belongFromItemToObjectType :Item)
ObjectPropertyRange(:belongFromItemToObjectType :ObjectType)
Declaration(ObjectProperty(:belongFromItemToParamsClass))
AnnotationAssertion(rdfs:comment :belongFromItemToParamsClass "Item имеет только один ParamsClass.")
SubObjectPropertyOf(:belongFromItemToParamsClass :belongToClass)
FunctionalObjectProperty(:belongFromItemToParamsClass)
ObjectPropertyDomain(:belongFromItemToParamsClass :Item)
ObjectPropertyRange(:belongFromItemToParamsClass :ParamsClass)
Declaration(ObjectProperty(:belongFromLeadToLossReason))
AnnotationAssertion(rdfs:comment :belongFromLeadToLossReason "Lead имеет только один LossReason.")
SubObjectPropertyOf(:belongFromLeadToLossReason :belongToClass)
InverseObjectProperties(:belongFromLeadToLossReason :hasLeadFromLossReason)
FunctionalObjectProperty(:belongFromLeadToLossReason)
ObjectPropertyDomain(:belongFromLeadToLossReason :Lead)
ObjectPropertyRange(:belongFromLeadToLossReason :LossReason)
Declaration(ObjectProperty(:belongFromLeadToObjectType))
AnnotationAssertion(rdfs:comment :belongFromLeadToObjectType "Lead имеет только один ObjectType.")
SubObjectPropertyOf(:belongFromLeadToObjectType :belongToClass)
InverseObjectProperties(:belongFromLeadToObjectType :hasLeadFromObjectType)
FunctionalObjectProperty(:belongFromLeadToObjectType)
ObjectPropertyDomain(:belongFromLeadToObjectType :Lead)
ObjectPropertyRange(:belongFromLeadToObjectType :ObjectType)
Declaration(ObjectProperty(:belongFromLeadToPipeline))
AnnotationAssertion(rdfs:comment :belongFromLeadToPipeline "Lead принадлежит одному Pipeline.")
SubObjectPropertyOf(:belongFromLeadToPipeline :belongToClass)
InverseObjectProperties(:belongFromLeadToPipeline :hasLeadFromPipeline)
FunctionalObjectProperty(:belongFromLeadToPipeline)
ObjectPropertyDomain(:belongFromLeadToPipeline :Lead)
ObjectPropertyRange(:belongFromLeadToPipeline :Pipeline)
Declaration(ObjectProperty(:belongFromLeadToStatus))
AnnotationAssertion(rdfs:comment :belongFromLeadToStatus "Lead имеет только один Status.")
SubObjectPropertyOf(:belongFromLeadToStatus :belongToClass)
InverseObjectProperties(:belongFromLeadToStatus :hasLeadFromStatus)
FunctionalObjectProperty(:belongFromLeadToStatus)
ObjectPropertyDomain(:belongFromLeadToStatus :Lead)
ObjectPropertyRange(:belongFromLeadToStatus :Status)
Declaration(ObjectProperty(:belongFromParamsClassToLead))
AnnotationAssertion(rdfs:comment :belongFromParamsClassToLead "ParamsClass имеет только один Lead.")
SubObjectPropertyOf(:belongFromParamsClassToLead :belongToClass)
FunctionalObjectProperty(:belongFromParamsClassToLead)
ObjectPropertyDomain(:belongFromParamsClassToLead :ParamsClass)
ObjectPropertyRange(:belongFromParamsClassToLead :Lead)
Declaration(ObjectProperty(:belongFromParamsClassToLossReason))
AnnotationAssertion(rdfs:comment :belongFromParamsClassToLossReason "ParamsClass имеет только один LossReason.")
SubObjectPropertyOf(:belongFromParamsClassToLossReason :belongToClass)
FunctionalObjectProperty(:belongFromParamsClassToLossReason)
ObjectPropertyDomain(:belongFromParamsClassToLossReason :ParamsClass)
ObjectPropertyRange(:belongFromParamsClassToLossReason :LossReason)
Declaration(ObjectProperty(:belongFromParamsClassToNewPipeline))
AnnotationAssertion(rdfs:comment :belongFromParamsClassToNewPipeline "У лида один новый пайплайн.")
SubObjectPropertyOf(:belongFromParamsClassToNewPipeline :belongToClass)
FunctionalObjectProperty(:belongFromParamsClassToNewPipeline)
ObjectPropertyDomain(:belongFromParamsClassToNewPipeline :ParamsClass)
ObjectPropertyRange(:belongFromParamsClassToNewPipeline :Pipeline)
Declaration(ObjectProperty(:belongFromParamsClassToNewStatus))
AnnotationAssertion(rdfs:comment :belongFromParamsClassToNewStatus "У лида один новый статус.")
SubObjectPropertyOf(:belongFromParamsClassToNewStatus :belongToClass)
FunctionalObjectProperty(:belongFromParamsClassToNewStatus)
ObjectPropertyDomain(:belongFromParamsClassToNewStatus :ParamsClass)
ObjectPropertyRange(:belongFromParamsClassToNewStatus :Status)
Declaration(ObjectProperty(:belongFromParamsClassToObjectType))
AnnotationAssertion(rdfs:comment :belongFromParamsClassToObjectType "ParamsClass имеет только один ObjectType.")
SubObjectPropertyOf(:belongFromParamsClassToObjectType :belongToClass)
FunctionalObjectProperty(:belongFromParamsClassToObjectType)
ObjectPropertyDomain(:belongFromParamsClassToObjectType :ParamsClass)
ObjectPropertyRange(:belongFromParamsClassToObjectType :ObjectType)
Declaration(ObjectProperty(:belongFromParamsClassToOldPipeline))
AnnotationAssertion(rdfs:comment :belongFromParamsClassToOldPipeline "У лида один старый пайплайн.")
SubObjectPropertyOf(:belongFromParamsClassToOldPipeline :belongToClass)
FunctionalObjectProperty(:belongFromParamsClassToOldPipeline)
ObjectPropertyDomain(:belongFromParamsClassToOldPipeline :ParamsClass)
ObjectPropertyRange(:belongFromParamsClassToOldPipeline :Pipeline)
Declaration(ObjectProperty(:belongFromParamsClassToOldStatus))
AnnotationAssertion(rdfs:comment :belongFromParamsClassToOldStatus "У лида один старый статус.")
SubObjectPropertyOf(:belongFromParamsClassToOldStatus :belongToClass)
FunctionalObjectProperty(:belongFromParamsClassToOldStatus)
ObjectPropertyDomain(:belongFromParamsClassToOldStatus :ParamsClass)
ObjectPropertyRange(:belongFromParamsClassToOldStatus :Status)
Declaration(ObjectProperty(:belongFromParamsClassToPipeline))
AnnotationAssertion(rdfs:comment :belongFromParamsClassToPipeline "ParamsClass имеет только один Pipeline.")
SubObjectPropertyOf(:belongFromParamsClassToPipeline :belongToClass)
FunctionalObjectProperty(:belongFromParamsClassToPipeline)
ObjectPropertyDomain(:belongFromParamsClassToPipeline :ParamsClass)
ObjectPropertyRange(:belongFromParamsClassToPipeline :Pipeline)
Declaration(ObjectProperty(:belongFromParamsClassToStatus))
AnnotationAssertion(rdfs:comment :belongFromParamsClassToStatus "ParamsClass имеет только один Status.")
SubObjectPropertyOf(:belongFromParamsClassToStatus :belongToClass)
FunctionalObjectProperty(:belongFromParamsClassToStatus)
ObjectPropertyDomain(:belongFromParamsClassToStatus :ParamsClass)
ObjectPropertyRange(:belongFromParamsClassToStatus :Status)
Declaration(ObjectProperty(:belongFromTasksResultToObjectType))
AnnotationAssertion(rdfs:comment :belongFromTasksResultToObjectType "TasksResult имеет только один ObjectType.")
SubObjectPropertyOf(:belongFromTasksResultToObjectType :belongToClass)
FunctionalObjectProperty(:belongFromTasksResultToObjectType)
ObjectPropertyRange(:belongFromTasksResultToObjectType :ObjectType)
Declaration(ObjectProperty(:belongToClass))
AnnotationAssertion(rdfs:comment :belongToClass "Общее свойство для уникальных связей.")
FunctionalObjectProperty(:belongToClass)
Declaration(ObjectProperty(:belongsFromElementsTimelineToElementsTimelineLinks))
AnnotationAssertion(rdfs:comment :belongsFromElementsTimelineToElementsTimelineLinks "Объект ссылок принадлежит временной шкале (один-ко-многим).")
SubObjectPropertyOf(:belongsFromElementsTimelineToElementsTimelineLinks :belongToClass)
FunctionalObjectProperty(:belongsFromElementsTimelineToElementsTimelineLinks)
ObjectPropertyDomain(:belongsFromElementsTimelineToElementsTimelineLinks :ElementsTimeline)
ObjectPropertyRange(:belongsFromElementsTimelineToElementsTimelineLinks :ElementsTimelineLinks)
Declaration(ObjectProperty(:hasAccount))
AnnotationAssertion(rdfs:comment :hasAccount "Воронка связана с одним или несколькими аккаунтами (многие-ко-многим).")
AnnotationAssertion(rdfs:comment :hasAccount "Причина потери связана с одним или несколькими аккаунтами (многие-ко-многим).")
AnnotationAssertion(rdfs:comment :hasAccount "Статус связан с одним или несколькими аккаунтами (многие-ко-многим).")
SubObjectPropertyOf(:hasAccount :hasClass)
ObjectPropertyDomain(:hasAccount :LossReason)
ObjectPropertyDomain(:hasAccount :Pipeline)
ObjectPropertyDomain(:hasAccount :Status)
ObjectPropertyRange(:hasAccount :Account)
Declaration(ObjectProperty(:hasClass))
AnnotationAssertion(rdfs:comment :hasClass "Общее свойство для не уникальных связей.")
ObjectPropertyRange(:hasClass :Lead)
Declaration(ObjectProperty(:hasCustomFieldFromLead))
AnnotationAssertion(rdfs:comment :hasCustomFieldFromLead "Lead связан с множеством CustomField (многие-ко-многим).")
SubObjectPropertyOf(:hasCustomFieldFromLead :hasClass)
InverseObjectProperties(:hasLeadFromCustomField :hasCustomFieldFromLead)
ObjectPropertyDomain(:hasCustomFieldFromLead :Lead)
ObjectPropertyRange(:hasCustomFieldFromLead :CustomField)
Declaration(ObjectProperty(:hasFilterPresetFromLead))
AnnotationAssertion(rdfs:comment :hasFilterPresetFromLead "Lead связан с множеством FilterPreset (многие-ко-многим).")
SubObjectPropertyOf(:hasFilterPresetFromLead :hasClass)
InverseObjectProperties(:hasLeadFromFilterPreset :hasFilterPresetFromLead)
ObjectPropertyDomain(:hasFilterPresetFromLead :Lead)
ObjectPropertyRange(:hasFilterPresetFromLead :FilterPreset)
Declaration(ObjectProperty(:hasItemFromLead))
AnnotationAssertion(rdfs:comment :hasItemFromLead "Lead имеет множество Item (один-ко-многим).")
SubObjectPropertyOf(:hasItemFromLead :hasClass)
InverseObjectProperties(:isItemOf :hasItemFromLead)
ObjectPropertyDomain(:hasItemFromLead :Lead)
ObjectPropertyRange(:hasItemFromLead :Item)
Declaration(ObjectProperty(:hasLeadFromCustomField))
AnnotationAssertion(rdfs:comment :hasLeadFromCustomField "CustomField связан с множеством Lead (многие-ко-многим).")
SubObjectPropertyOf(:hasLeadFromCustomField :hasClass)
InverseObjectProperties(:hasLeadFromCustomField :hasCustomFieldFromLead)
ObjectPropertyDomain(:hasLeadFromCustomField :CustomField)
ObjectPropertyRange(:hasLeadFromCustomField :Lead)
Declaration(ObjectProperty(:hasLeadFromFilterPreset))
AnnotationAssertion(rdfs:comment :hasLeadFromFilterPreset "FilterPreset связан с множеством Lead (многие-ко-многим).")
SubObjectPropertyOf(:hasLeadFromFilterPreset :hasClass)
InverseObjectProperties(:hasLeadFromFilterPreset :hasFilterPresetFromLead)
ObjectPropertyDomain(:hasLeadFromFilterPreset :FilterPreset)
ObjectPropertyRange(:hasLeadFromFilterPreset :Lead)
Declaration(ObjectProperty(:hasLeadFromLossReason))
AnnotationAssertion(rdfs:comment :hasLeadFromLossReason "LossReason имеет множество Lead (один-ко-многим).")
SubObjectPropertyOf(:hasLeadFromLossReason :hasClass)
InverseObjectProperties(:belongFromLeadToLossReason :hasLeadFromLossReason)
ObjectPropertyDomain(:hasLeadFromLossReason :LossReason)
ObjectPropertyRange(:hasLeadFromLossReason :Lead)
Declaration(ObjectProperty(:hasLeadFromObjectType))
AnnotationAssertion(rdfs:comment :hasLeadFromObjectType "ObjectType имеет множество Lead (один-ко-многим).")
SubObjectPropertyOf(:hasLeadFromObjectType :hasClass)
InverseObjectProperties(:belongFromLeadToObjectType :hasLeadFromObjectType)
ObjectPropertyDomain(:hasLeadFromObjectType :ObjectType)
ObjectPropertyRange(:hasLeadFromObjectType :Lead)
Declaration(ObjectProperty(:hasLeadFromPipeline))
AnnotationAssertion(rdfs:comment :hasLeadFromPipeline "Pipeline имеет множество Lead (один-ко-многим).")
SubObjectPropertyOf(:hasLeadFromPipeline :hasClass)
InverseObjectProperties(:belongFromLeadToPipeline :hasLeadFromPipeline)
ObjectPropertyDomain(:hasLeadFromPipeline :Pipeline)
ObjectPropertyRange(:hasLeadFromPipeline :Lead)
Declaration(ObjectProperty(:hasLeadFromStatus))
AnnotationAssertion(rdfs:comment :hasLeadFromStatus "Status имеет множество Lead (один-ко-многим).")
SubObjectPropertyOf(:hasLeadFromStatus :hasClass)
InverseObjectProperties(:belongFromLeadToStatus :hasLeadFromStatus)
ObjectPropertyDomain(:hasLeadFromStatus :Status)
ObjectPropertyRange(:hasLeadFromStatus :Lead)
Declaration(ObjectProperty(:hasLeadFromTaskResult))
AnnotationAssertion(rdfs:comment :hasLeadFromTaskResult "TaskResult связан с множеством Lead (многие-ко-многим).")
SubObjectPropertyOf(:hasLeadFromTaskResult :hasClass)
InverseObjectProperties(:hasLeadFromTaskResult :hasTaskResultFromLead)
ObjectPropertyDomain(:hasLeadFromTaskResult :TaskResult)
ObjectPropertyRange(:hasLeadFromTaskResult :Lead)
Declaration(ObjectProperty(:hasLeadFromTypeElement))
AnnotationAssertion(rdfs:comment :hasLeadFromTypeElement "TypeElement связан с множеством Lead (многие-ко-многим).")
SubObjectPropertyOf(:hasLeadFromTypeElement :hasClass)
InverseObjectProperties(:hasLeadFromTypeElement :hasTypeElementFromLead)
ObjectPropertyDomain(:hasLeadFromTypeElement :TypeElement)
ObjectPropertyRange(:hasLeadFromTypeElement :Lead)
Declaration(ObjectProperty(:hasParamsClassFromLead))
AnnotationAssertion(rdfs:comment :hasParamsClassFromLead "Lead имеет множество ParamsClass (один-ко-многим).")
SubObjectPropertyOf(:hasParamsClassFromLead :hasClass)
InverseObjectProperties(:isParamsClassOf :hasParamsClassFromLead)
ObjectPropertyDomain(:hasParamsClassFromLead :Lead)
ObjectPropertyRange(:hasParamsClassFromLead :ParamsClass)
Declaration(ObjectProperty(:hasTaskResultFromLead))
AnnotationAssertion(rdfs:comment :hasTaskResultFromLead "Lead связан с множеством TaskResult (многие-ко-многим).")
SubObjectPropertyOf(:hasTaskResultFromLead :hasClass)
InverseObjectProperties(:hasLeadFromTaskResult :hasTaskResultFromLead)
ObjectPropertyDomain(:hasTaskResultFromLead :Lead)
ObjectPropertyRange(:hasTaskResultFromLead :TaskResult)
Declaration(ObjectProperty(:hasTypeElementFromLead))
AnnotationAssertion(rdfs:comment :hasTypeElementFromLead "Lead связан с множеством TypeElement (многие-ко-многим).")
SubObjectPropertyOf(:hasTypeElementFromLead :hasClass)
InverseObjectProperties(:hasLeadFromTypeElement :hasTypeElementFromLead)
ObjectPropertyDomain(:hasTypeElementFromLead :Lead)
ObjectPropertyRange(:hasTypeElementFromLead :TypeElement)
Declaration(ObjectProperty(:isConnectedTo))
AnnotationAssertion(rdfs:comment :isConnectedTo "ElementsTimelineEmbedded и Lead связаны симметрично.")
SubObjectPropertyOf(:isConnectedTo :belongToClass)
SubObjectPropertyOf(:isConnectedTo :hasClass)
SymmetricObjectProperty(:isConnectedTo)
ObjectPropertyDomain(:isConnectedTo ObjectOneOf(:ElementsTimelineEmbedded :Lead))
ObjectPropertyRange(:isConnectedTo ObjectOneOf(:ElementsTimelineEmbedded :Lead))
Declaration(ObjectProperty(:isItemOf))
AnnotationAssertion(rdfs:comment :isItemOf "Item принадлежит одному Lead.")
SubObjectPropertyOf(:isItemOf :belongToClass)
InverseObjectProperties(:isItemOf :hasItemFromLead)
FunctionalObjectProperty(:isItemOf)
ObjectPropertyDomain(:isItemOf :Item)
ObjectPropertyRange(:isItemOf :Lead)
Declaration(ObjectProperty(:isParamsClassOf))
AnnotationAssertion(rdfs:comment :isParamsClassOf "ParamsClass связан с множеством Lead (один-ко-многим).")
SubObjectPropertyOf(:isParamsClassOf :belongToClass)
InverseObjectProperties(:isParamsClassOf :hasParamsClassFromLead)
FunctionalObjectProperty(:isParamsClassOf)
ObjectPropertyDomain(:isParamsClassOf :ParamsClass)
ObjectPropertyRange(:isParamsClassOf :Lead)
Declaration(ObjectProperty(:precedesStatus))
AnnotationAssertion(rdfs:comment :precedesStatus "Определяет последовательность статусов в воронке; транзитивное свойство.")
TransitiveObjectProperty(:precedesStatus)
ObjectPropertyDomain(:precedesStatus :Status)
ObjectPropertyRange(:precedesStatus :Status)
Declaration(DataProperty(:hasAuthorName))
AnnotationAssertion(rdfs:comment :hasAuthorName "Имя автора элемента Item.")
DataPropertyDomain(:hasAuthorName :Item)
DataPropertyRange(:hasAuthorName xsd:string)
Declaration(DataProperty(:hasCallResult))
AnnotationAssertion(rdfs:comment :hasCallResult "Расшифровка статуса по результатам вызова, связанного с ParamsClass")
DataPropertyDomain(:hasCallResult :ParamsClass)
DataPropertyRange(:hasCallResult xsd:string)
Declaration(DataProperty(:hasCallStatus))
AnnotationAssertion(rdfs:comment :hasCallStatus "Идентификатор статуса по результатам вызова, связанного с ParamsClass")
DataPropertyDomain(:hasCallStatus :ParamsClass)
DataPropertyRange(:hasCallStatus xsd:string)
Declaration(DataProperty(:hasCallText))
AnnotationAssertion(rdfs:comment :hasCallText "Входящй/исходящий звонок, связанный с ParamsClass")
DataPropertyDomain(:hasCallText :ParamsClass)
DataPropertyRange(:hasCallText xsd:string)
Declaration(DataProperty(:hasCatalogID))
AnnotationAssertion(rdfs:comment :hasCatalogID "Идентификатор каталога, связанного с CustomField")
DataPropertyDomain(:hasCatalogID :CustomField)
DataPropertyRange(:hasCatalogID xsd:string)
Declaration(DataProperty(:hasClosedAt))
AnnotationAssertion(rdfs:comment :hasClosedAt "Дата закрытия лида.")
DataPropertyDomain(:hasClosedAt :Lead)
DataPropertyRange(:hasClosedAt xsd:dateTime)
Declaration(DataProperty(:hasCode))
AnnotationAssertion(rdfs:comment :hasCode "Код ObjectType")
AnnotationAssertion(rdfs:comment :hasCode "Код пользовательского поля (CustomField)")
DataPropertyDomain(:hasCode :CustomField)
DataPropertyDomain(:hasCode :ObjectType)
DataPropertyRange(:hasCode xsd:string)
Declaration(DataProperty(:hasColor))
AnnotationAssertion(rdfs:comment :hasColor "Цвет статуса")
DataPropertyDomain(:hasColor :Status)
DataPropertyRange(:hasColor xsd:string)
Declaration(DataProperty(:hasCompleteTill))
AnnotationAssertion(rdfs:comment :hasCompleteTill "Срок выполнения для Item")
DataPropertyDomain(:hasCompleteTill :Item)
DataPropertyRange(:hasCompleteTill xsd:integer)
Declaration(DataProperty(:hasCreatedAt))
AnnotationAssertion(rdfs:comment :hasCreatedAt "Дата создания объекта.")
DataPropertyDomain(:hasCreatedAt :Account)
DataPropertyDomain(:hasCreatedAt :Contact)
DataPropertyDomain(:hasCreatedAt :CustomField)
DataPropertyDomain(:hasCreatedAt :ElementsTimeline)
DataPropertyDomain(:hasCreatedAt :ElementsTimelineEmbedded)
DataPropertyDomain(:hasCreatedAt :ElementsTimelineLinks)
DataPropertyDomain(:hasCreatedAt :FilterPreset)
DataPropertyDomain(:hasCreatedAt :Lead)
DataPropertyDomain(:hasCreatedAt :LossReason)
DataPropertyDomain(:hasCreatedAt :ObjectType)
DataPropertyDomain(:hasCreatedAt :ParamsClass)
DataPropertyDomain(:hasCreatedAt :Pipeline)
DataPropertyDomain(:hasCreatedAt :Status)
DataPropertyDomain(:hasCreatedAt :TaskResult)
DataPropertyDomain(:hasCreatedAt :TypeElement)
DataPropertyDomain(:hasCreatedAt ObjectUnionOf(:Lead))
DataPropertyRange(:hasCreatedAt xsd:dateTime)
Declaration(DataProperty(:hasCreatedBy))
AnnotationAssertion(rdfs:comment :hasCreatedBy "Идентификатор пользователя, создавшего результат задачи")
AnnotationAssertion(rdfs:comment :hasCreatedBy "Идентификатор пользователя, создавшего элемент Item")
DataPropertyDomain(:hasCreatedBy :Item)
DataPropertyDomain(:hasCreatedBy :ParamsClass)
DataPropertyDomain(:hasCreatedBy :TaskResult)
DataPropertyRange(:hasCreatedBy xsd:integer)
Declaration(DataProperty(:hasCurrency))
DataPropertyDomain(:hasCurrency :Account)
DataPropertyRange(:hasCurrency xsd:string)
Declaration(DataProperty(:hasCurrent))
DataPropertyDomain(:hasCurrent :ElementsTimelineLinks)
DataPropertyRange(:hasCurrent xsd:string)
Declaration(DataProperty(:hasData))
AnnotationAssertion(rdfs:comment :hasData "Данные результата задачи в формате JSON")
DataPropertyDomain(:hasData :TaskResult)
DataPropertyRange(:hasData xsd:string)
Declaration(DataProperty(:hasDateCreated))
DataPropertyDomain(:hasDateCreated :Item)
DataPropertyDomain(:hasDateCreated :TaskResult)
DataPropertyRange(:hasDateCreated xsd:dateTime)
Declaration(DataProperty(:hasDateModified))
DataPropertyDomain(:hasDateModified :Item)
DataPropertyDomain(:hasDateModified :TaskResult)
DataPropertyRange(:hasDateModified xsd:dateTime)
Declaration(DataProperty(:hasDuration))
AnnotationAssertion(rdfs:comment :hasDuration "Длительность действия для элемента Items")
AnnotationAssertion(rdfs:comment :hasDuration "Длительность действия, связанного с ParamsClass")
DataPropertyDomain(:hasDuration :Item)
DataPropertyDomain(:hasDuration :ParamsClass)
DataPropertyRange(:hasDuration xsd:integer)
Declaration(DataProperty(:hasElementId))
DataPropertyDomain(:hasElementId :Item)
DataPropertyDomain(:hasElementId :TaskResult)
DataPropertyRange(:hasElementId xsd:integer)
Declaration(DataProperty(:hasElementType))
DataPropertyDomain(:hasElementType :Contact)
DataPropertyDomain(:hasElementType :Item)
DataPropertyDomain(:hasElementType :TaskResult)
DataPropertyRange(:hasElementType xsd:integer)
Declaration(DataProperty(:hasEnums))
AnnotationAssertion(rdfs:comment :hasEnums "Перечисление значений для CustomField в Json формате")
DataPropertyDomain(:hasEnums :CustomField)
DataPropertyRange(:hasEnums xsd:string)
Declaration(DataProperty(:hasFailed))
AnnotationAssertion(rdfs:comment :hasFailed "Указывает, было ли действие элемента Item неудачным")
DataPropertyDomain(:hasFailed :Item)
DataPropertyRange(:hasFailed xsd:boolean)
Declaration(DataProperty(:hasFieldID))
AnnotationAssertion(rdfs:comment :hasFieldID "Идентификатор поля ParamsClass")
DataPropertyDomain(:hasFieldID :ParamsClass)
DataPropertyRange(:hasFieldID xsd:integer)
Declaration(DataProperty(:hasFieldType))
AnnotationAssertion(rdfs:comment :hasFieldType "Тип поля для ParamsClass")
DataPropertyDomain(:hasFieldType :ParamsClass)
DataPropertyRange(:hasFieldType xsd:integer)
Declaration(DataProperty(:hasID))
AnnotationAssertion(rdfs:comment :hasID "Уникальный идентификатор для каждого объекта (функциональное свойство).")
FunctionalDataProperty(:hasID)
DataPropertyDomain(:hasID :Account)
DataPropertyDomain(:hasID :Contact)
DataPropertyDomain(:hasID :CustomField)
DataPropertyDomain(:hasID :ElementsTimeline)
DataPropertyDomain(:hasID :ElementsTimelineEmbedded)
DataPropertyDomain(:hasID :ElementsTimelineLinks)
DataPropertyDomain(:hasID :FilterPreset)
DataPropertyDomain(:hasID :Item)
DataPropertyDomain(:hasID :Lead)
DataPropertyDomain(:hasID :LossReason)
DataPropertyDomain(:hasID :ObjectType)
DataPropertyDomain(:hasID :ParamsClass)
DataPropertyDomain(:hasID :Pipeline)
DataPropertyDomain(:hasID :Status)
DataPropertyDomain(:hasID :TaskResult)
DataPropertyDomain(:hasID :TypeElement)
DataPropertyDomain(:hasID ObjectUnionOf(:Lead :Account))
DataPropertyRange(:hasID xsd:integer)
Declaration(DataProperty(:hasLeadType))
AnnotationAssertion(rdfs:comment :hasLeadType "Тип лида в ParamsClass")
DataPropertyDomain(:hasLeadType :ParamsClass)
DataPropertyRange(:hasLeadType xsd:string)
Declaration(DataProperty(:hasLinkData))
AnnotationAssertion(rdfs:comment :hasLinkData "Уникальная ссылка ParamsClass")
AnnotationAssertion(rdfs:comment :hasLinkData "Уникальная ссылка Accounts")
FunctionalDataProperty(:hasLinkData)
DataPropertyDomain(:hasLinkData :Account)
DataPropertyDomain(:hasLinkData :ParamsClass)
DataPropertyRange(:hasLinkData xsd:string)
Declaration(DataProperty(:hasMainContactID))
AnnotationAssertion(rdfs:comment :hasMainContactID "Идентификатор главного контакта лида.")
DataPropertyDomain(:hasMainContactID :Lead)
DataPropertyRange(:hasMainContactID xsd:integer)
Declaration(DataProperty(:hasModifiedBy))
DataPropertyDomain(:hasModifiedBy :Item)
DataPropertyDomain(:hasModifiedBy :TaskResult)
DataPropertyRange(:hasModifiedBy xsd:integer)
Declaration(DataProperty(:hasMsecCreatedAt))
AnnotationAssertion(rdfs:comment :hasMsecCreatedAt "Время создания элемента Item в миллисекундах")
DataPropertyDomain(:hasMsecCreatedAt :Item)
DataPropertyRange(:hasMsecCreatedAt xsd:float)
Declaration(DataProperty(:hasName))
AnnotationAssertion(rdfs:comment :hasName "Атрибут имени для сущностей.")
DataPropertyDomain(:hasName :Account)
DataPropertyDomain(:hasName :Contact)
DataPropertyDomain(:hasName :CustomField)
DataPropertyDomain(:hasName :ElementsTimeline)
DataPropertyDomain(:hasName :ElementsTimelineEmbedded)
DataPropertyDomain(:hasName :ElementsTimelineLinks)
DataPropertyDomain(:hasName :FilterPreset)
DataPropertyDomain(:hasName :Item)
DataPropertyDomain(:hasName :Lead)
DataPropertyDomain(:hasName :LossReason)
DataPropertyDomain(:hasName :ObjectType)
DataPropertyDomain(:hasName :ParamsClass)
DataPropertyDomain(:hasName :Pipeline)
DataPropertyDomain(:hasName :Status)
DataPropertyDomain(:hasName :TaskResult)
DataPropertyDomain(:hasName :TypeElement)
DataPropertyDomain(:hasName ObjectUnionOf(:Lead :Account))
DataPropertyRange(:hasName xsd:string)
Declaration(DataProperty(:hasNewEnumID))
AnnotationAssertion(rdfs:comment :hasNewEnumID "Идентификатор нового значения перечисления ParamsClass")
DataPropertyDomain(:hasNewEnumID :ParamsClass)
DataPropertyRange(:hasNewEnumID xsd:integer)
Declaration(DataProperty(:hasNewValue))
AnnotationAssertion(rdfs:comment :hasNewValue "Новое текстовое значение ParamsClass")
DataPropertyDomain(:hasNewValue :ParamsClass)
DataPropertyRange(:hasNewValue xsd:string)
Declaration(DataProperty(:hasNext))
DataPropertyDomain(:hasNext :ElementsTimelineLinks)
DataPropertyRange(:hasNext xsd:string)
Declaration(DataProperty(:hasNoteID))
AnnotationAssertion(rdfs:comment :hasNoteID "Идентификатор заметки, связанной с элементом Item")
DataPropertyDomain(:hasNoteID :Item)
DataPropertyRange(:hasNoteID xsd:integer)
Declaration(DataProperty(:hasNoteType))
AnnotationAssertion(rdfs:comment :hasNoteType "Тип заметки, связанной с элементом Item")
DataPropertyDomain(:hasNoteType :Item)
DataPropertyRange(:hasNoteType xsd:integer)
Declaration(DataProperty(:hasOldEnumID))
AnnotationAssertion(rdfs:comment :hasOldEnumID "Идентификатор старого значения перечисления ParamsClass")
DataPropertyDomain(:hasOldEnumID :ParamsClass)
DataPropertyRange(:hasOldEnumID xsd:integer)
Declaration(DataProperty(:hasOldValue))
AnnotationAssertion(rdfs:comment :hasOldValue "Историческое текстовое значение ParamsClass")
DataPropertyDomain(:hasOldValue :ParamsClass)
DataPropertyRange(:hasOldValue xsd:string)
Declaration(DataProperty(:hasParams))
AnnotationAssertion(rdfs:comment :hasParams "JSON-объект для хранения параметров Items")
DataPropertyDomain(:hasParams :Item)
DataPropertyRange(:hasParams xsd:string)
Declaration(DataProperty(:hasPhone))
AnnotationAssertion(rdfs:comment :hasPhone "Номер телефона, связанный с ParamsClass")
DataPropertyDomain(:hasPhone :ParamsClass)
DataPropertyRange(:hasPhone xsd:string)
Declaration(DataProperty(:hasPrev))
DataPropertyDomain(:hasPrev :ElementsTimelineLinks)
DataPropertyRange(:hasPrev xsd:string)
Declaration(DataProperty(:hasQuery))
AnnotationAssertion(rdfs:comment :hasQuery "Запрос для предустановленного фильтра (FilterPreset)")
DataPropertyDomain(:hasQuery :FilterPreset)
DataPropertyRange(:hasQuery xsd:string)
Declaration(DataProperty(:hasRawData))
AnnotationAssertion(rdfs:comment :hasRawData "Исходные JSON-данные, связанные с сущностями.")
DataPropertyDomain(:hasRawData :Account)
DataPropertyDomain(:hasRawData :Contact)
DataPropertyDomain(:hasRawData :CustomField)
DataPropertyDomain(:hasRawData :ElementsTimeline)
DataPropertyDomain(:hasRawData :ElementsTimelineEmbedded)
DataPropertyDomain(:hasRawData :ElementsTimelineLinks)
DataPropertyDomain(:hasRawData :FilterPreset)
DataPropertyDomain(:hasRawData :Item)
DataPropertyDomain(:hasRawData :Lead)
DataPropertyDomain(:hasRawData :LossReason)
DataPropertyDomain(:hasRawData :ObjectType)
DataPropertyDomain(:hasRawData :ParamsClass)
DataPropertyDomain(:hasRawData :Pipeline)
DataPropertyDomain(:hasRawData :Status)
DataPropertyDomain(:hasRawData :TaskResult)
DataPropertyDomain(:hasRawData :TypeElement)
DataPropertyDomain(:hasRawData ObjectUnionOf(:Lead))
DataPropertyRange(:hasRawData xsd:string)
Declaration(DataProperty(:hasResponsibleUserID))
AnnotationAssertion(rdfs:comment :hasResponsibleUserID "Идентификатор ответственного пользователя за Lead.")
AnnotationAssertion(rdfs:comment :hasResponsibleUserID "Идентификатор ответственного пользователя за элемент Item")
AnnotationAssertion(rdfs:comment :hasResponsibleUserID "Идентификатор ответственного пользователя за TaskResult.")
AnnotationAssertion(rdfs:comment :hasResponsibleUserID "Идентификатор ответственного пользователя за Contact.")
DataPropertyDomain(:hasResponsibleUserID :Contact)
DataPropertyDomain(:hasResponsibleUserID :Item)
DataPropertyDomain(:hasResponsibleUserID :Lead)
DataPropertyDomain(:hasResponsibleUserID :TaskResult)
DataPropertyRange(:hasResponsibleUserID xsd:integer)
Declaration(DataProperty(:hasSort))
AnnotationAssertion(rdfs:comment :hasSort "Порядок сортировки (Status)")
AnnotationAssertion(rdfs:comment :hasSort "Порядок сортировки (Pipeline)")
AnnotationAssertion(rdfs:comment :hasSort "Порядок сортировки (FilterPreset)")
DataPropertyDomain(:hasSort :FilterPreset)
DataPropertyDomain(:hasSort :Pipeline)
DataPropertyDomain(:hasSort :Status)
DataPropertyRange(:hasSort xsd:integer)
Declaration(DataProperty(:hasSrc))
AnnotationAssertion(rdfs:comment :hasSrc "Источник данных (от какого расширения) в ParamsClass")
DataPropertyDomain(:hasSrc :ParamsClass)
DataPropertyRange(:hasSrc xsd:string)
Declaration(DataProperty(:hasStatus))
AnnotationAssertion(rdfs:comment :hasStatus "Статус элемента Item внутри класса ParamsClass")
AnnotationAssertion(rdfs:comment :hasStatus "Лид имеет текущий статус.")
AnnotationAssertion(rdfs:comment :hasStatus "Аккаунт связан с одним или несколькими статусами (многие-ко-многим).")
AnnotationAssertion(rdfs:comment :hasStatus "Воронка содержит несколько статусов (многие-ко-многим).")
FunctionalDataProperty(:hasStatus)
DataPropertyRange(:hasStatus xsd:integer)
Declaration(DataProperty(:hasSubtypeID))
AnnotationAssertion(rdfs:comment :hasSubtypeID "Идентификатор подтипа для ParamsClass")
DataPropertyDomain(:hasSubtypeID :ParamsClass)
DataPropertyRange(:hasSubtypeID xsd:integer)
Declaration(DataProperty(:hasSystemType))
AnnotationAssertion(rdfs:comment :hasSystemType "Системный тип (FilterPreset)")
DataPropertyDomain(:hasSystemType :FilterPreset)
DataPropertyRange(:hasSystemType xsd:integer)
Declaration(DataProperty(:hasText))
AnnotationAssertion(rdfs:comment :hasText "Текстовое содержимое элемента Item")
AnnotationAssertion(rdfs:comment :hasText "Текстовое описание параметра ParamsClass")
DataPropertyDomain(:hasText :Item)
DataPropertyDomain(:hasText :ParamsClass)
DataPropertyRange(:hasText xsd:string)
Declaration(DataProperty(:hasTimezone))
DataPropertyDomain(:hasTimezone :Account)
DataPropertyRange(:hasTimezone xsd:string)
Declaration(DataProperty(:hasType))
DataPropertyDomain(:hasType :CustomField)
DataPropertyDomain(:hasType :Item)
DataPropertyDomain(:hasType :Lead)
DataPropertyDomain(:hasType :ParamsClass)
DataPropertyDomain(:hasType :Status)
DataPropertyDomain(:hasType :TaskResult)
DataPropertyRange(:hasType xsd:integer)
Declaration(DataProperty(:hasUniq))
AnnotationAssertion(rdfs:comment :hasUniq "Для хранения уникального идентификатора записи из расширения")
DataPropertyDomain(:hasUniq :ParamsClass)
DataPropertyRange(:hasUniq xsd:string)
Declaration(DataProperty(:hasUniqueID))
AnnotationAssertion(rdfs:comment :hasUniqueID "UUID элемента Items")
DataPropertyDomain(:hasUniqueID :Item)
DataPropertyRange(:hasUniqueID xsd:string)
Declaration(DataProperty(:hasUpdatedBy))
AnnotationAssertion(rdfs:comment :hasUpdatedBy "Идентификатор пользователя, который обновил лид.")
DataPropertyDomain(:hasUpdatedBy :Lead)
DataPropertyRange(:hasUpdatedBy xsd:integer)
Declaration(DataProperty(:isArchive))
DataPropertyDomain(:isArchive :Pipeline)
DataPropertyRange(:isArchive xsd:boolean)
Declaration(DataProperty(:isCompletable))
AnnotationAssertion(rdfs:comment :isCompletable "Может ли элемент Item быть завершен")
DataPropertyDomain(:isCompletable :Item)
DataPropertyRange(:isCompletable xsd:boolean)
Declaration(DataProperty(:isDeletable))
AnnotationAssertion(rdfs:comment :isDeletable "Может ли элемент Item быть удален")
AnnotationAssertion(rdfs:comment :isDeletable "Может ли результат задачи быть удален")
DataPropertyDomain(:isDeletable :Item)
DataPropertyDomain(:isDeletable :TaskResult)
DataPropertyRange(:isDeletable xsd:boolean)
Declaration(DataProperty(:isEditable))
AnnotationAssertion(rdfs:comment :isEditable "Может ли результат задачи быть отредактирован")
AnnotationAssertion(rdfs:comment :isEditable "Может ли элемент Item быть отредактирован")
DataPropertyDomain(:isEditable :Item)
DataPropertyDomain(:isEditable :Status)
DataPropertyDomain(:isEditable :TaskResult)
DataPropertyRange(:isEditable xsd:boolean)
Declaration(DataProperty(:isMain))
AnnotationAssertion(rdfs:comment :isMain "Основной ли Pipeline")
DataPropertyDomain(:isMain :Pipeline)
DataPropertyRange(:isMain xsd:boolean)
Declaration(DataProperty(:isPinned))
AnnotationAssertion(rdfs:comment :isPinned "Указывает, закреплен ли элемент Item")
DataPropertyDomain(:isPinned :Item)
DataPropertyRange(:isPinned xsd:boolean)
Declaration(NamedIndividual(:ApplicationReceived))
ClassAssertion(:Status :ApplicationReceived)
ObjectPropertyAssertion(:precedesStatus :ApplicationReceived :Qualified)
DataPropertyAssertion(:hasName :ApplicationReceived "Заявка получена")
Declaration(NamedIndividual(:ClosedStatus))
ClassAssertion(:Status :ClosedStatus)
DataPropertyAssertion(:hasID :ClosedStatus "100"^^xsd:integer)
DataPropertyAssertion(:hasName :ClosedStatus "Сделка заключена")
Declaration(NamedIndividual(:ContactType))
ClassAssertion(:ObjectType :ContactType)
DataPropertyAssertion(:hasID :ContactType "701"^^xsd:integer)
DataPropertyAssertion(:hasName :ContactType "Контакт")
Declaration(NamedIndividual(:ElementsTimelineEmbedded))
AnnotationAssertion(rdfs:comment :ElementsTimelineEmbedded "Представляет вложенные события внутри временной шкалы.")
Declaration(NamedIndividual(:ExampleAccount))
AnnotationAssertion(:hasEmbeddedTimeline :ExampleAccount :ExampleTimelineEvent1)
AnnotationAssertion(:hasPipeline :ExampleAccount :ExamplePipeline)
ClassAssertion(:Account :ExampleAccount)
DataPropertyAssertion(:hasID :ExampleAccount "500"^^xsd:integer)
DataPropertyAssertion(:hasName :ExampleAccount "Пример компании")
Declaration(NamedIndividual(:ExampleContact))
AnnotationAssertion(:belongsToObjectType :ExampleContact :ContactType)
AnnotationAssertion(:isContactOfLead :ExampleContact :ExampleLead)
ClassAssertion(:Contact :ExampleContact)
DataPropertyAssertion(:hasID :ExampleContact "600"^^xsd:integer)
DataPropertyAssertion(:hasName :ExampleContact "Иван Иванов")
Declaration(NamedIndividual(:ExampleLead))
AnnotationAssertion(:belongsToObjectType :ExampleLead :LeadType)
AnnotationAssertion(:hasStatus :ExampleLead :ClosedStatus)
AnnotationAssertion(:hasEmbeddedTimeline :ExampleLead :ExampleTimelineEvent1)
AnnotationAssertion(:hasContact :ExampleLead :ExampleContact)
AnnotationAssertion(:hasPipeline :ExampleLead :ExamplePipeline)
ClassAssertion(:Lead :ExampleLead)
DataPropertyAssertion(:hasID :ExampleLead "1"^^xsd:integer)
DataPropertyAssertion(:hasName :ExampleLead "Пример лида")
Declaration(NamedIndividual(:ExamplePipeline))
AnnotationAssertion(:hasStatus :ExamplePipeline :Qualified)
AnnotationAssertion(:hasStatus :ExamplePipeline :ApplicationReceived)
ClassAssertion(:Pipeline :ExamplePipeline)
DataPropertyAssertion(:hasID :ExamplePipeline "10"^^xsd:integer)
DataPropertyAssertion(:hasName :ExamplePipeline "Воронка продаж")
Declaration(NamedIndividual(:ExampleTimeline))
AnnotationAssertion(:hasEmbeddedElement :ExampleTimeline :ExampleTimelineEvent1)
ClassAssertion(:ElementsTimeline :ExampleTimeline)
DataPropertyAssertion(:hasID :ExampleTimeline "2000"^^xsd:integer)
Declaration(NamedIndividual(:ExampleTimelineEvent1))
AnnotationAssertion(:hasTimeline :ExampleTimelineEvent1 :ExampleTimeline)
AnnotationAssertion(:belongsToAccount :ExampleTimelineEvent1 :ExampleAccount)
AnnotationAssertion(:hasLead :ExampleTimelineEvent1 :ExampleLead)
ClassAssertion(:ElementsTimelineEmbedded :ExampleTimelineEvent1)
DataPropertyAssertion(:hasID :ExampleTimelineEvent1 "3000"^^xsd:integer)
Declaration(NamedIndividual(:Lead))
AnnotationAssertion(rdfs:comment :Lead "Представляет потенциальную сделку или возможность в CRM.")
Declaration(NamedIndividual(:LeadType))
ClassAssertion(:ObjectType :LeadType)
DataPropertyAssertion(:hasID :LeadType "700"^^xsd:integer)
DataPropertyAssertion(:hasName :LeadType "Лид")
Declaration(NamedIndividual(:ProposalSent))
Declaration(NamedIndividual(:Qualified))
ClassAssertion(:Status :Qualified)
ObjectPropertyAssertion(:precedesStatus :Qualified :ProposalSent)
DataPropertyAssertion(:hasName :Qualified "Квалифицирован")
AnnotationAssertion(rdfs:comment :belongFromTasksResultToObjectType "TasksResult имеет только один ObjectType.")
AnnotationPropertyDomain(:belongFromTasksResultToObjectType :TasksResult)
Declaration(AnnotationProperty(:belongsToAccount))
Declaration(AnnotationProperty(:belongsToObjectType))
Declaration(AnnotationProperty(:hasContact))
Declaration(AnnotationProperty(:hasEmbeddedElement))
Declaration(AnnotationProperty(:hasEmbeddedTimeline))
Declaration(AnnotationProperty(:hasLead))
Declaration(AnnotationProperty(:hasPipeline))
AnnotationAssertion(rdfs:comment :hasStatus "Статус элемента Item внутри класса ParamsClass")
AnnotationAssertion(rdfs:comment :hasStatus "Лид имеет текущий статус.")
AnnotationAssertion(rdfs:comment :hasStatus "Аккаунт связан с одним или несколькими статусами (многие-ко-многим).")
AnnotationAssertion(rdfs:comment :hasStatus "Воронка содержит несколько статусов (многие-ко-многим).")
Declaration(AnnotationProperty(:hasTimeline))
Declaration(AnnotationProperty(:isContactOfLead))
)
